Lambda Expressions Java? 

Kenapa java ada fitur lambda expression?
gunanya untuk membawa fitur fungsional ke java. java merupakan bahasa murni OOP yang tidak mendukung penuh fitur fungsional (functional programming features), jadi tidak seperti bahasa lainnya seperti python, ruby dan c++. jadi untuk memecahkan masalah ini, java menghadirkan fungsi lambda expression. untuk membawa functional programming features. 

Lalu apa itu functional programming features? 
jadi normalnya, dalam OOP data akan tersimpan dan terpelihara dalam kelas dan objek. akan tetapi jika di dalam functional programming features, data kaan tersimpan di dalam fungsi dan variabel. jadi java sebernarnya tidak mendukung functional programming features.

Lalu apa fungsi dari lambda expressions? 
    1. Untuk mendukung functional programming features.
    2. Mengoptimasi kode / consize code, intinya  menyingkat kode untuk bisa melakukan tugas yang besar.

Lalu apa itu Lambda Expressions?
Lambda merupakan singkatan dari anonymous function.
    lalu apa itu anonymous function? 
        1. fungsi yang tidak memiliki nama method (nameless function). 
        2. fungsi tidak memiliki tipe return. 
        3. tidak memiliki access modifier.

Gimana cara nulis kodenya?

contoh normal method:
public void funct() {
    sout("Normal method");
}

jika ingin mengubah menjadi lambda expressions, tinggal hapus aja access modifier, return type dan nama functionnya. maka sisanya adalah lambda expressions dan beri tambahan tanda panah.

contoh lambda expressions: 
() -> sout("method lambda expressions"); 

jika hanya satu baris kode, kurung kurawal tidak wajib dihadirkan, inilah yang namanya consize code. dan jika ingin memambahkan sebuah arguments dan tidak memiliki return nilai, maka bisa menggunakan lambda expression. 

contoh lambda expression with argumnets: 
(int a, int b) -> sout(a + b);

di lambda expressions, tidak wajib menyertakan tipe data untuk argumentsnya, karena java sudah otomatis menemukan tipe data yang cocok sesuai dengan data yang masuk.

contoh lambda expressions: 
(a, b) -> sout(a + b);

tapi bagaimana jika ingin memberi return nilai? sama seperti contoh di atas, tinggal tambahkan keyword return. (tipe data argument tidak wajib ditulis). 

contoh 1: 
(int a) -> { return a };

akan tetapi dnegan menggunakan lambda expressions, sangat memungkin tidak menuliskan keyword return beserta tanda kurung kurawalnya (berlaku hanya satu baris kode)

contoh 2:
(a) -> a + a; atau a -> a + a;

Lalu bagaimana cara manggilnya? 

sebelum itu, kita harus mengerti apa itu fucntional interface concepts di ajva. 

Apa itu functional interface concepts? 
normalnya saat membuat interface, maka hanya bisa membuat method abstract saja, apa itu abstract? hanya bisa membuat deifnisi fungsinya saja akan tetapi tidak bisa diimplementasikan. 

terus apa itu functional interface (bukan konsep)? apapun class interface yang hanya mengandung satu method abstract, mkaa itu disebut dengan functional interface. jika lebih dari satu method abstract, maka kan menjadi normal class interface. functional interface juga disebut SAM (Single Abstarct Method). 
sebelum java 7, java hanya bisa membuat satu method abstract, lalu untuk java 7 ke atas, java sudah bisa membuat lebih dari satu method di class interfacenya, yaitu abstract method, default method dan static method. jadi dari tiga method tadi sudah jadi satu menjadi nilai default untuk method yang ada di class interface. 

di functioanl nterface, hanya memperbolehkan satu method abstarct saja, akan tetapi bisa mmeiliki jumlah berapa saja untuk (any method) method default dan static. di functioanl interface bisa menerima deafult dan static method tapi wajib mempunyai hanya satu method abstarct, kalau lebih dari satu method abstract maka kana menjadi normal interface class (SAM). 

Ada beberapa functional interface di java.
    1. Runnable -> run() (abstract method)
    2. Callable -> call() (abstarct method)
    3. Compareble -> compateTo() (abstract method) 
    4. ActionListener -> actionPerformed() (abstract method) 

kenapa kita harus tahu konsep dari funcional interface? ya karena untuk memanggil dan bekerja lambda expressions. maka untuk memanggil lambda exprrsion hanya bisa mneggunakan functional interface. 

jika ingin membuat sebuah functional interface, maka gunakan anotasi @FunctioanalInterface, untuke memberi spesifikasi mengenai class interface yang dijadika sebagai fungsi interface. dan jika ini diincludekan maka akan muncul pesan bahwa tidak boleh membuat lebih dari satu method abstract.

kesimpulan lambda expressions:
    1. tipe data arguments tidak wajib disertakan, java sudah otomatis mengenali tipe datanya.
    2. jika ingin membuat lambda expression dengan menggunakan keyword return, maka wajib menyertakan kurung kurawal.
    3. jika hanya satu argument pada fungsi lambda, tanda kurung tidak wajib disertakan (langsung tulis variabel argumentnya, parameter tidak perlu).
    4. jika ingin membuat lambda expressions dengan return nilai tanpa menggunakan keyword return, maka langsung saja menulis variabel yang ingin di return nilainya beserta operasinya. 
    5. point 1 - 4 berlaku untuk satu baris kode.
    6. lambda expression dilambangkan dengan tanda panah. 
    7. lambda expression adalah anonymous functions, tidak ada nama, access modifer dan return nilai. 
    8. functioanal interface hanya boleh memliki satu abstract method, akan tetapi bisa memiliki banya default dan static method. 
    9. Jika ingin menggunakan lambda expressions, harus paham konsep dari functional interface.
    10. lambada expressions hanya bisa dipanggil menggunakan functional interface. 
    11. beri anotasi untuk memberi arti secara explisit. 